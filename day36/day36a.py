'''

同步
    所谓同步就是一个任务的完成需要依赖另外一个任务时，
    只有等待被依赖的任务完成后，依赖的任务才能算完成，
    这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。

异步

    　所谓异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，
    依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否
    真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。

阻塞  非阻塞

    　所谓异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，
    只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，
    所以它是不可靠的任务序列。




'''


#multi 多元 process进程

import os
from multiprocessing import Process
from time import sleep

def func(args):
    print(args)
    print(12345)
    sleep(1)
    print('子进程：》》》:',os.getpid())
    print('子进程的父进程：》》》:', os.getppid())
    print(67890)


if __name__ == '__main__':
#主进程
    # 注册 #p是一个进程对象
    p=Process(target=func,args=(1222,))  #如果传参的化 需要传元组
    #告诉系统启动进程
    p.start()  # 不一定马上运行  进程进入就绪态  启动一个子进程操作系统创建新进程 执行新进程中的代码
    #func()
    print('*'*10)  #这时的print是属于主进程 所以和上边的p.start()应该是同时执行的
    #但是如果过直接调函数 就变成了同步
    print('父进程：》》》:',os.getpid())#当前进程 相对于p.start()
    print('父进程的父进程：》》》:',os.getppid())


'''
进程的生命周期
   主进程
   子进程
    开启了子进程的主进程
       主进程自己的执行代码如果长  等待自己的代码执行结束
       子进程的执行时间长，主进程会在主进程代码执行完毕后等待子进程执行完毕 主进程才会结束
       也可能主进程关闭了 子进程还没有关闭  例如cmd 下启动一个程序关闭cmd

'''



















